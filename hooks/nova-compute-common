#!/bin/bash -e

CHARM="nova-compute"
PACKAGES="nova-compute python-keystone genisoimage"
SERVICES="nova-compute"
CONF_DIR="/etc/nova"
NOVA_CONF=$(config-get nova-config)
API_CONF="/etc/nova/api-paste.ini"
QUANTUM_CONF="/etc/quantum/quantum.conf"

NET_MANAGER=$(config-get network-manager)
if [ "$NET_MANAGER" == "Quantum" ]; then
  QUANTUM_PLUGIN=$(config-get quantum-plugin)
  case $QUANTUM_PLUGIN in
    "ovs")
      PACKAGES="$PACKAGES quantum-plugin-openvswitch-agent"
      EARLY_PACKAGES="openvswitch-datapath-dkms" # OVS needs DKMS for GRE tunnels
      SERVICES="$SERVICES quantum-plugin-openvswitch-agent"
      QUANTUM_CORE_PLUGIN="quantum.plugins.openvswitch.ovs_quantum_plugin.OVSQuantumPluginV2"
      QUANTUM_PLUGIN_CONF="/etc/quantum/plugins/openvswitch/ovs_quantum_plugin.ini"
      ;;
    "nvp")
      # TODO: This needs to be changed - but leaving hook in for the time being
      PACKAGES="$PACKAGES quantum-plugin-nicira"
      QUANTUM_CORE_PLUGIN="quantum.plugins.nicira.nicira_nvp_plugin.QuantumPlugin.NvpPluginV2"
      QUANTUM_PLUGIN_CONF="/etc/quantum/plugins/nicira/nvp.ini"
      ;;
     *)
      juju-log "Unrecognised plugin for quantum: $QUANTUM_PLUGIN" && exit 1
      ;;
  esac
else
  PACKAGES="$PACKAGES nova-api nova-network"
  SERVICES="$SERVICES nova-api nova-network"
fi

if [[ -e $CHARM_DIR/lib/nova/nova-common ]] ; then
  . $CHARM_DIR/lib/nova/nova-common
else
  juju-log "$CHARM: Couldn't load $CHARM_DIR/lib/nova-common" && exit 1
fi

determine_compute_package() {
  # determines the appropriate nova-compute package to install
  # for the configured virt-type.
  local virt_type="$1"
  local compute_pkg=""
  case $virt_type in
    "kvm") compute_pkg="nova-compute-kvm";;
    "qemu") compute_pkg="nova-compute-qemu";;
    "xen") compute_pkg="nova-compute-xen";;
    "uml") compute_pkg="nova-compute-uml";;
    "lxc") compute_pkg="nova-compute-lxc";;
    *) error_out" ERROR: Unsupported virt_type=$virt_type";;
  esac
  echo "$compute_pkg"
}

function setup_bridge {
  # XXX This is required by nova-network and will likely move somewhere else
  # once we can split these services up into seperate formulas.
  br=$1
  ip=$2
  netmask=$3
  [[ -z $br ]] && br="br100"
  [[ -z $ip ]] && ip="11.0.0.1"
  [[ -z $netmask ]] && netmask="255.255.255.0"

  apt-get -y install bridge-utils augeas-lenses augeas-tools
  echo "Configuring bridge $br ($ip $netmask)"
  context="/files/etc/network/interfaces"
  augtool <<EOF
  set $context/auto[child::1 = "$br"]/1 $br
  set $context/iface[. = '$br'] $br
  set $context/iface[. = '$br']/family inet
  set $context/iface[. = '$br']/method static
  set $context/iface[. = '$br']/address $ip
  set $context/iface[. = '$br']/netmask $netmask
  set $context/iface[. = '$br']/bridge_ports none 
  save
EOF
  ifdown -a ; ifup -a
}

function configure_network_manager {
  # needed by the nova-network bits
  # to be expanded later to cover flatDhcp and VLAN
  echo "$0: configuring $1 network manager"

  local network_bridge=$(config-get bridge-interface)

  case $1 in
    "FlatManager")
      local bridge_ip=$(config-get bridge-ip)
      local bridge_netmask=$(config-get bridge-netmask)
      setup_bridge $network_bridge $bridge_ip $bridge_netmask
      set_or_update network_manager nova.network.manager.FlatManager
      set_or_update flat_network_bridge $network_bridge
      ;;
    "FlatDHCPManager")
      local flat_interface=$(config-get flat-interface)
      local ec2_host=$(relation-get ec2_host)
      [[ -z $ec2_host ]] && juju-log "nova-compute: Missing ec2_host" \
        && exit 0
      set_or_update network_manager nova.network.manager.FlatDHCPManager
      # the interface on which bridge is built
      set_or_update flat_interface $flat_interface
      # address of API server to forward requests
      set_or_update ec2_dmz_host $ec2_host
      ;;
    "Quantum")
      set_or_update "network_api_class" "nova.network.quantumv2.api.API"
      set_or_update "quantum_auth_strategy" "keystone"
      set_or_update "quantum_url" "http://$(relation-get quantum_host):9696"
      set_or_update "quantum_admin_tenant_name" "$(relation-get service_tenant)"
      set_or_update "quantum_admin_username" "$(relation-get service_username)"
      set_or_update "quantum_admin_password" "$(relation-get service_password)"
      set_or_update "quantum_admin_auth_url" \
                    "http://$(relation-get keystone_host):$(relation-get auth_port)/v2.0"
      set_or_update "core_plugin" "$QUANTUM_CORE_PLUGIN" "$QUANTUM_CONF"
      set_or_update "bind_host" "$(unit-get private-address)" "$QUANTUM_CONF"
      case $QUANTUM_PLUGIN in
        "ovs")
          set_or_update "libvirt_vif_driver" "nova.virt.libvirt.vif.LibvirtHybridOVSBridgeDriver"
          set_or_update "libvirt_use_virtio_for_bridges" "True"
          set_or_update "tenant_network_type" "gre" $QUANTUM_PLUGIN_CONF "OVS"
          set_or_update "enable_tunneling" "True" $QUANTUM_PLUGIN_CONF "OVS"
          set_or_update "tunnel_id_ranges" "1:1000" $QUANTUM_PLUGIN_CONF "OVS"
          set_or_update "local_ip" "$(unit-get private-address)" $QUANTUM_PLUGIN_CONF "OVS"
          ;;
      esac
      ;;
    *) echo "ERROR: Invalid network manager $1" && exit 1 ;;
  esac
}

BR_INT="br-int"

function configure_quantum_bridge {
  if ! ovs-vsctl show | grep -q "Bridge $BR_INT"; then
    ovs-vsctl add-br $BR_INT
  fi
}

function configure_libvirt {
  cat > /etc/libvirt/qemu.conf << EOF
# File installed by Juju nova-compute charm
cgroup_device_acl = [
   "/dev/null", "/dev/full", "/dev/zero",
   "/dev/random", "/dev/urandom",
   "/dev/ptmx", "/dev/kvm", "/dev/kqemu",
   "/dev/rtc", "/dev/hpet", "/dev/net/tun",
]
EOF
  service libvirt-bin reload
}
