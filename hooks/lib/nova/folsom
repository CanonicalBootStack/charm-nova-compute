#!/bin/bash -e

# Folsom-specific functions

nova_set_or_update() {
  # Set a config option in nova.conf or api-paste.ini, depending
  # Defaults to updating nova.conf
  local key="$1"
  local value="$2"
  local conf_file="$3"

  local nova_conf=${NOVA_CONF:-/etc/nova/nova.conf}
  local api_conf=${API_CONF:-/etc/nova/api-paste.ini}

  [[ -z $key ]] && juju-log "$CHARM: set_or_update: value $value missing key" && exit 1
  [[ -z $value ]] && juju-log "$CHARM: set_or_update: key $key missing value" && exit 1

  [[ -z "$conf_file" ]] && conf_file=$nova_conf

  local pattern=""
  case "$conf_file" in
    "$nova_conf") match="^$key="
                  pattern="$key="
                  out=$pattern
                  ;;
    "$api_conf") match="^$key = "
                 pattern="$match"
                 out="$key = "
                 ;;
    *) juju-log "$CHARM ERROR: set_or_update: Invalid conf_file ($conf_file)"
  esac

  cat $conf_file | grep "$match$value" >/dev/null &&
    juju-log "$CHARM: $key=$value already in set in $conf_file" \
      && return 0
  if cat $conf_file | grep "$match" >/dev/null ; then
    juju-log "$CHARM: Updating $conf_file, $key=$value"
    sed -i "s|\($pattern\).*|\1$value|" $conf_file
  else
    juju-log "$CHARM: Setting new option $key=$value in $conf_file"
    echo "$out$value" >>$conf_file
  fi
}

# Upgrade Helpers
nova_pre_upgrade() {
  # Pre-upgrade helper.  Caller should pass the version of OpenStack we are
  # upgrading from.
  return 0 # Nothing to do here, yet.
}

nova_post_upgrade() {
  # Post-upgrade helper.  Caller should pass the version of OpenStack we are
  # upgrading from.
  local upgrade_from="$1"
  juju-log "$CHARM: Running post-upgrade hook: $upgrade_from -> folsom."
  # We only support essex -> folsom, currently.
  [[ "$upgrade_from" != "essex" ]] &&
    error_out "Unsupported upgrade: $upgrade_from -> folsom"

  # This may be dangerous, if we are upgrading a number of units at once
  # and they all begin the same migration concurrently.  Migrate only from
  # the cloud controller(s).
  if [[ "$CHARM" == "nova-cloud-controller" ]] ; then
    juju-log "$CHARM: Migrating nova database."
    /usr/bin/nova-manage db sync

    # Trigger a service restart on all other nova nodes.
    local r_ids=$(relation-ids cloud-controller)
    for r_id in $r_ids ; do
      juju-log "$CHARM: Triggering a service restart on relation $r_id."
      relation-set -r $r_id restart-trigger=$(uuid)
    done
  fi

  # Packaging currently takes care of converting the Essex gflags format
  # to .ini, but we need to update the api-paste.ini manually.  It can be
  # updated directly from keystone, via the identity-service relation,
  # if it exists.  Only services that require keystone credentials will
  # have modified api-paste.ini, and only those services will have a .dpkg-dist
  # version present.
  local r_id=$(relation-ids identity-service)
  if [[ -n "$r_id" ]] && [[ -e "$CONF_DIR/api-paste.ini.dpkg-dist" ]] ; then
    # Backup the last api config, update the stock packaged version
    # with our current Keystone info.
    mv $API_CONF $CONF_DIR/api-paste.ini.juju-last
    mv $CONF_DIR/api-paste.ini.dpkg-dist $CONF_DIR/api-paste.ini

    unit=$(relation-list -r $r_id | head -n1)
    # Note, this should never be called from an relation hook, only config-changed.
    export JUJU_REMOTE_UNIT=$unit
    service_port=$(relation-get -r $r_id service_port)
    auth_port=$(relation-get -r $r_id auth_port)
    service_username=$(relation-get -r $r_id service_username)
    service_password=$(relation-get -r $r_id service_password)
    service_tenant=$(relation-get -r $r_id service_tenant)
    keystone_host=$(relation-get -r $r_id  private-address)
    unset JUJU_REMOTE_UNIT

    juju-log "$CHARM: Updating new api-paste.ini with keystone data from $unit:$r_id"
    set_or_update "service_host" "$keystone_host" "$API_CONF"
    set_or_update "service_port" "$service_port" "$API_CONF"
    set_or_update "auth_host" "$keystone_host" "$API_CONF"
    set_or_update "auth_port" "$auth_port" "$API_CONF"
    set_or_update "auth_uri" "http://$keystone_host:$service_port/" "$API_CONF"
    set_or_update "admin_tenant_name" "$service_tenant" "$API_CONF"
    set_or_update "admin_user" "$service_username" "$API_CONF"
    set_or_update "admin_password" "$service_password" "$API_CONF"
  fi

  # TEMPORARY
  # RC3 packaging in cloud archive doesn't have this in postinst.  Do it here
  sed -e "s,^root_helper=.\+,rootwrap_config=/etc/nova/rootwrap.conf," -i /etc/nova/nova.conf

  juju-log "$CHARM: Post-upgrade hook complete: $upgrade_from -> folsom."
}
