#!/bin/bash -e
CHARM_DIR=$(dirname $0)
ARG0=${0##*/}

if [[ -e $CHARM_DIR/nova-compute-common ]] ; then
  . $CHARM_DIR/nova-compute-common
else
  juju-log "ERROR: Could not load nova-compute-common from $CHARM_DIR"
fi

function install_hook {
  local virt_type=$(config-get virt-type)
  local compute_pkg=$(determine_compute_package "$virt_type")
  apt-get -y install python-software-properties || exit 1
  configure_install_source $(config-get nova-release)
  apt-get update || exit 1
  apt-get -y install $compute_pkg $PACKAGES || exit 1
  service_ctl all stop
}

function config_changed() {

  # Determine whether or not we should do an upgrade, based on whether or not
  # the version offered in nova-release is greater than what is installed.

  local install_src=$(config-get nova-release)
  local cur=$(get_os_codename_package "nova-common")
  local available=$(get_os_codename_install_source "$install_src")

  if dpkg --compare-versions $(get_os_version_codename "$cur") lt \
                             $(get_os_version_codename "$available") ; then
    juju-log "$CHARM: Upgrading OpenStack release: $cur -> $available."
    do_openstack_upgrade "$install_src" $PACKAGES
  fi

  set_config_flags
  service_ctl all restart
}

function amqp_joined {
  # we request a username on the rabbit queue
  # and store it in nova.conf. our response is its IP + PASSWD
  # but we configure that in _changed
  local rabbit_user=$(config-get rabbit-user)
  local rabbit_vhost=$(config-get rabbit-vhost)
  juju-log "$CHARM - amqp_joined: requesting credentials for $rabbit_user"
  relation-set username=$rabbit_user
  relation-set vhost=$rabbit_vhost
}

function amqp_changed {
  # server creates our credentials and tells us where
  # to connect.  for now, using default vhost '/'
  local rabbit_host=$(relation-get private-address)
  local rabbit_password=$(relation-get password)

  if [[ -z $rabbit_host ]] || \
     [[ -z $rabbit_password ]] ; then
      juju-log "$CHARM - amqp_changed: rabbit_host||rabbit_password not set."
      exit 0
  fi

  local rabbit_user=$(config-get rabbit-user)
  local rabbit_vhost=$(config-get rabbit-vhost)
  juju-log "$CHARM - amqp_changed: Setting rabbit config in nova.conf: " \
           "$rabbit_user@$rabbit_host/$rabbit_vhost"
  set_or_update rabbit_host $rabbit_host
  set_or_update rabbit_userid $rabbit_user
  set_or_update rabbit_password $rabbit_password
  set_or_update rabbit_virtual_host $rabbit_vhost
  service_ctl all restart
}

function db_joined {
  # tell mysql provider which database we want. it will create it and give us
  # credentials
  local nova_db=$(config-get nova-db)
  local db_user=$(config-get db-user)
  local hostname=$(unit-get private-address)
  juju-log "$CHARM - db_joined: requesting database access to $nova_db for "\
           "$db_user@$hostname"
  relation-set database=$nova_db username=$db_user hostname=$hostname
}

function db_changed {
  local db_host=`relation-get private-address`
  local db_password=`relation-get password`

  if [[ -z $db_host ]] || [[ -z $db_password ]] ; then
    juju-log "$CHARM - db_changed: db_host||db_password set, will retry."
    exit 0
  fi

  local nova_db=$(config-get nova-db)
  local db_user=$(config-get db-user)
  juju-log "$CHARM - db_changed: Configuring nova.conf for access to $nova_db"

  set_or_update sql_connection "mysql://$db_user:$db_password@$db_host/$nova_db"
  service_ctl all restart
}

function nova-network_changed {
  MANAGER=`relation-get network_manager`
  if [[ -z $MANAGER ]] ; then
    echo "nova-network_changed: MANAGER not yet set. Exit 0 and retry"
    exit 0
  fi
  configure_network_manager $MANAGER
  service_ctl all restart
}

function image-service_changed {
  GLANCE_API_SERVER=`relation-get glance-api-server`
  if [[ -z $GLANCE_API_SERVER ]] ; then
    echo "image-service_changed: GLANCE_API_SERVER not yet set. Exit 0 and retry"
    exit 0
  fi
  set_or_update glance_api_servers $GLANCE_API_SERVER
  service_ctl all restart
}

function keystone_joined {
  # service=None lets keystone know we don't need anything entered
  # into the service catalog.  This hook exists to workaround lack
  # of features explained here:
  #   https://lists.ubuntu.com/archives/juju/2012-March/001342.html
  # Once landed, this type of reconfiguration should happen in a hook
  # triggered by nova-cloud-controller's keystone relation.
  apt-get -y install python-keystone
  relation-set service="None" region="None" public_url="None" \
               admin_url="None" internal_url="None"
  set_or_update "auth_strategy" "keystone"
}

function controller_changed {
  # nova-c-c will send a unique uuid via this setting when we need to
  # restart our services (ie, after a db migration or upgrade)
  local restart_trigger=$(relation-get restart-trigger)
  if [[ -n "$restart_trigger" ]] ; then
    conditional_service_restart all "$restart_trigger"
  fi
}

case $ARG0 in
  "install") install_hook ;;
  "start"|"stop") exit 0 ;;
  "config-changed") config_changed ;;
  "amqp-relation-joined") amqp_joined ;;
  "amqp-relation-changed") amqp_changed ;;
  "shared-db-relation-joined") db_joined ;;
  "shared-db-relation-changed") db_changed ;;
  "network-manager-relation-joined") exit 0 ;;
  "network-manager-relation-changed") nova-network_changed ;;
  "image-service-relation-joined") exit 0 ;;
  "image-service-relation-changed") image-service_changed ;;
  "identity-service-relation-joined") keystone_joined ;;
  "identity-service-relation-changed") exit 0 ;;
  "cloud-controller-relation-joined" ) exit 0 ;;
  "cloud-controller-relation-changed") controller_changed ;;
esac
